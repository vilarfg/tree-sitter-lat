============================================
Null
============================================

x: @null

----

(source
  (definition
    (key)
    (null)))

============================================
Logical
============================================

x: @false
x: @true
x: @not @false
x: @not @true

----

(source
  (definition
    (key)
    (false))
  (definition
    (key)
    (true))
  (definition
    (key)
    (not
      (false)))
  (definition
    (key)
    (not
      (true))))

============================================
Number
============================================

x: [
    @nan,

    -@infinity,
    @infinity,

    -0b0,
    0B10_10_10,

    -0o0,
    0O5_2,

    -0x0,
    0x2_a,

    0ua, ||? Character `a`
    0uÂ•Ω, ||? Chinese character `‰Ω†`
    0uÿ≥, ||? Arabic character `ÿ≥`
    -0uüôÇ, ||? Character `üôÇ`
    0uìÅÖ, ||? Egyptian hieroglyph
    0uüòÄ, ||? Emoji `üòÄ`

    -0u\\, ||? Escaped character `\\`
    0u\a, ||? Escaped character `\\a`
    0u\b, ||? Escaped character `\\b`
    0u\f, ||? Escaped character `\\f`
    0u\n, ||? Escaped character `\\n`
    0u\r, ||? Escaped character `\\r`
    0u\t, ||? Escaped character `\\t`
    0u\b, ||? Escaped character `\\b`

    -0,
    0,
    -0_0_0._0_0_0e+0_0_0,
    1_2_3._4_5_6e-7_8_9,
    .4_2e-4_2,
    0042,
    0_0_4_2
]


----

(source
  (definition
    (key)
    (list
      (nan)
      (minus
        (infinity))
      (infinity)
      (minus
        (bin))
      (bin)
      (minus
        (oct))
      (oct)
      (minus
        (hex))
      (hex)
      (uni)
      (comment
        (notes))
      (uni)
      (comment
        (notes))
      (uni)
      (comment
        (notes))
      (minus
        (uni))
      (comment
        (notes))
      (uni)
      (comment
        (notes))
      (uni)
      (comment
        (notes))
      (minus
        (number_esc (ess)))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (number_esc (ess))
      (comment
        (notes))
      (minus
        (dec))
      (dec)
      (minus
        (dec))
      (dec)
      (dec)
      (dec)
      (dec))))

============================================
Text
============================================

x: "Hello"
x: "Hello\n\"World\"" ||? Escaped

|?  Multiple lines,
    multiple escapes,
    multiple substitutions,
    multiple doc and comment-like phrases inside,...
    everything multiple! |
x: "|! I should not register as a doc |
    Hello \"[ user.name ]\", ||! I should not registers as a doc either!

    Is it me, you're looking for?...

    If not, are you looking for [ question ]|! I look like a comment, but let me assure you, I am NOT! |?
    || ? Or perhaps looking for \U013045?
    |? Or\nPerhaps\nsomething\t\"else\"|
    Another escape \x1b, or even another \u263a" 

----

(source
  (definition
    (key)
    (text
      (s)))
  (definition
    (key)
    (text
      (s)
      (text_esc (line_feed))
      (text_esc (quotation_mark))
      (s)
      (text_esc (quotation_mark))))
  (comment
    (notes))
  (comment
    (notes))
  (definition
    (key)
    (text
      (s)
      (text_esc (quotation_mark))
      (interpolation
        (ref
          (path
            (id)
            (id))))
      (text_esc (quotation_mark))
      (s)
      (interpolation
        (ref
          (path
            (id))))
      (s)
      (text_esc (character_hex6))
      (s)
      (text_esc (line_feed))
      (s)
      (text_esc (line_feed))
      (s)
      (text_esc (horizontal_tab))
      (text_esc (quotation_mark))
      (s)
      (text_esc (quotation_mark))
      (s)
      (text_esc (character_hex2))
      (s)
      (text_esc (character_hex4)))))

============================================
List
============================================

x: [] ||? empty

||! `y` is FULL of heterogeneous stuff!
y: [
    @null,
    @not @false, @true,
    @nan,
    -@infinity, @infinity,
    0b101010, 0o52, 0x2a,
    0uìÅÖ, 0uüòÄ, -0uüòø, 0uüÇΩ = 0uüÇæ,
    0u\\,
    42,
    "Look at me!... I'm inside a list üòâ",
    { question: "What's the meaning of life?", answer: 42, list: [42] },

    @if @true @then 42 @else -42, ||? A value will make it into the list, either 42 or -42
    @if @false @then 42, ||? 42 will not make it into the list, as the condition is false


    @each i, v @fallback 42 @in [42]  ["[i]: [v]"],
    @each v @from 0 @until 10 @by 0.5 @if v @remainder 2 = 0 [ v + 1 ],

    ||? the following match statement WILL add -42 to the list
    @match [42] {
        [0] 42,
        _ -42
    },

    ||? the following match statement WILL NOT add -42 to the list
    @match [42] {
        [0] 42
    },

    ...[42, 42, 42]
]


----

(source
  (definition
    (key)
    (list))
  (comment
    (notes))
  (doc
    (notes))
  (definition
    (key)
    (list
      (null)
      (not
        (false))
      (true)
      (nan)
      (minus
        (infinity))
      (infinity)
      (bin)
      (oct)
      (hex)
      (uni)
      (uni)
      (minus
        (uni))
      (eq
        (left
          (uni))
        (right
          (uni)))
      (number_esc (ess))
      (dec)
      (text
        (s))
      (map
        (pair
          (key
            (id))
          (text
            (s)))
        (pair
          (key
            (id))
          (dec))
        (pair
          (key
            (id))
          (list
            (dec))))
      (if
        (condition
          (true))
        (then
          (dec))
        (else
          (minus
            (dec))))
      (comment
        (notes))
      (if
        (condition
          (false))
        (then
          (dec)))
      (comment
        (notes))
      (gen
        (each
          (k)
          (value)
          (iterator
            (fallback
              (dec))
            (list
              (dec))))
        (list
          (text
            (interpolation
              (ref
                (path
                  (id))))
            (s)
            (interpolation
              (ref
                (path
                  (id)))))))
      (gen
        (each
          (value)
          (range
            (from
              (dec))
            (until
              (dec))
            (by
              (dec))))
        (filter
          (eq
            (left
              (rem
                (left
                  (ref
                    (path
                      (id))))
                (right
                  (dec))))
            (right
              (dec))))
        (list
          (add
            (left
              (ref
                (path
                  (id))))
            (right
              (dec)))))
      (comment
        (notes))
      (match
        (list
          (dec))
        (cases
          (case
            (clauses
              (dec))
            (dec))
          (case
            (other)
            (minus
              (dec)))))
      (comment
        (notes))
      (match
        (list
          (dec))
        (cases
          (case
            (clauses
              (dec))
            (dec))))
      (spread
        (list
          (dec)
          (dec)
          (dec))))))

============================================
Map
============================================

x: {}

----

(source
  (definition
    (key)
    (map)))
